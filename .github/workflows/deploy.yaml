name: Update Odoo Sh Project

on:
  workflow_dispatch:
    inputs:
      owner:
        description: "Project Owner"
        default: indexa-git
        type: string
        required: true
      project:
        description: "Project Name"
        required: true
        type: string
      branch:
        description: "Project Branch"
        required: true
        default: "13.0"
        type: choice
        options:
          - "12.0"
          - "13.0"
          - "14.0"
          - "15.0"
          - "16.0"
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        default: "staging"
        options:
          - "production"
          - "staging"
      force_staging:
        description: "Force deploy on staging branch"
        required: false
        type: boolean
        default: false

jobs:
  update-submodules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Local
        uses: actions/checkout@v3
        with:
          path: ./

      - name: Log the inputs
        run: |
          echo "Project Owner: $OWNER"
          echo "Project Name: $NAME"
          echo "Branch: $BRANCH"
          echo "Environment: $ENVIRONMENT"
          echo "Project full name: $PROJECT_FULL_NAME"
          echo "Force staging: $FORCE_STAGING"
        env:
          OWNER: ${{ inputs.owner }}
          NAME: ${{ inputs.project }}
          BRANCH: ${{ inputs.branch }}
          ENVIRONMENT: ${{ inputs.environment }}
          PROJECT_FULL_NAME: ${{ inputs.owner }}/${{ inputs.project }}
          FORCE_STAGING: ${{ inputs.force_staging }}

      - name: Construct repository name with owner
        id: repo_slugs
        shell: bash
        run: |
          REPO_FULL_NAME=${{ inputs.owner }}/${{ inputs.project }}
          echo ::set-output name=repo_name::$REPO_FULL_NAME

      - name: Clone Project
        uses: actions/checkout@v3
        with:
          repository: ${{ steps.repo_slugs.outputs.repo_name }}
          token: ${{ secrets.ACTIONS_PAT }}
          path: ./${{ inputs.owner }}/${{ inputs.project }}
          ref: "13.0"
          submodules: "recursive"
          fetch-depth: 0

      - name: Sync and Fetch Changes
        working-directory: ./${{ inputs.owner }}/${{ inputs.project }}
        run: |
          git submodule sync
          git submodule update
          git submodule foreach "(git reset --hard origin/${{ inputs.branch }})"
          git submodule foreach "(git checkout ${{ inputs.branch }} && git pull --ff origin ${{ inputs.branch }}) || true"

      - name: Add updated submodule to root repository
        working-directory: ./${{ inputs.owner }}/${{ inputs.project }}
        run: |
          for i in $(git submodule foreach --quiet 'echo $path'); \
          do echo "Adding $i to root repo" && git add "$i"; \
          done
      
      - name: Commit changes
        working-directory: ./${{ inputs.owner }}/${{ inputs.project }}
        run: |
          git checkout -b ${{ inputs.branch }}-update-submodules
          git commit -m "[REF] *: updated ${{ inputs.branch }} to latest head of submodules"
          git push -d origin ${{ inputs.branch }}-update-submodules
          git push --set-upstream origin ${{ inputs.branch }}-update-submodules
          git checkout ${{ inputs.branch }}
      
      - name: Deploy to production
        working-directory: ./${{ inputs.owner }}/${{ inputs.project }}
        if: inputs.environment == 'production'
        run: |
          git checkout ${{ inputs.branch }}
          git merge --ff ${{ inputs.branch }}-update-submodules
          git push origin ${{ inputs.branch }}
          echo "Updated ${{ inputs.project }}/${{ inputs.branch }} to latest head of submodules"

      - name: Deploy to staging
        working-directory: ./${{ inputs.owner }}/${{ inputs.project }}
        if: inputs.environment == 'staging'
        run: |
          git checkout ${{ inputs.branch }}-staging || (echo "No staging branch found, creating new branch" \ 
          && git checkout -b ${{ inputs.branch }}-staging)

          if [ ${{ inputs.force_staging }} == "true" ]; then \
            git reset --hard origin/${{ inputs.branch }} \
            git push origin -f ${{ inputs.branch }}-staging || exit 1 \
           else \
            git merge --ff ${{ inputs.branch }}-update-submodules \
            git push origin ${{ inputs.branch }}-staging || exit 1 \
          fi \
          echo "Updated ${{ inputs.branch }} to latest head of submodules" \
          fi
